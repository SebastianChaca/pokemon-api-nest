# # dev
# FROM node:18-alpine As dev

# # Create app directory
# WORKDIR /usr/src/app

# # Copy application dependency manifests to the container image.
# # A wildcard is used to ensure copying both package.json AND package-lock.json (when available).
# # Copying this first prevents re-running npm install on every code change.
# COPY --chown=node:node package*.json ./

# # Install app dependencies using the `npm ci` command instead of `npm install`
# RUN npm ci

# # Bundle app source
# COPY --chown=node:node . .

# Use the node user from the image (instead of the root user)
# USER node

# Set Docker as a non-root user
# USER node

FROM node:18-alpine3.15 AS deps
# Check https://github.com/nodejs/docker-node/tree/b4117f9333da4138b03a546ec926ef50a31506c3#nodealpine to understand why libc6-compat might be needed.
RUN apk add --no-cache libc6-compat
WORKDIR /app
COPY package.json package-lock.json ./
# RUN npm install --frozen-lockfile
RUN npm ci

# Build the app with cache dependencies
FROM node:18-alpine3.15 AS builder
WORKDIR /app
COPY --from=deps /app/node_modules ./node_modules
COPY . .
RUN npm run build


# Production image, copy all the files and run next
FROM node:18-alpine3.15 AS runner

# Set working directory
WORKDIR /usr/src/app

COPY package.json package-lock.json ./

RUN npm install --prod

COPY --from=builder /app/dist ./dist

# Copiar el directorio y su contenido
RUN mkdir -p ./pokedex

COPY --from=builder ./app/dist/ ./app
COPY ./.env ./app/.env

# Dar permiso para ejecutar la applicaci√≥n
RUN adduser --disabled-password pokeuser
RUN chown -R pokeuser:pokeuser ./pokedex
USER pokeuser

EXPOSE 3000

CMD [ "node","dist/main" ]